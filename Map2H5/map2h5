#!/usr/bin/env python3

import re
from sys import exit as sysexit
from PIL import Image, ImageTk
import tkinter
from numpy import array, asarray, zeros, ones, roll, uint8, uint16, arange, savetxt, transpose, hstack
import customtkinter
from time import sleep
from matplotlib.pyplot import imshow
try:
    from XRDXRFutils import DataXRF
except ModuleNotFoundError:
    _err = customtkinter.CTk()
    _err.title("Map2H5")
    _err.grid_rowconfigure(0, weight = 1)
    _err.grid_columnconfigure(0, weight = 1)
    _lab = customtkinter.CTkLabel(master = _err, text = "Error: Required module XRDXRFutils not found")
    _lab.grid(row = 0, column = 0, padx = 10, pady = 10, sticky = "nswe")
    _err.mainloop()
    sysexit()
import tkinter as tk
from tkinter import ttk
from PyMca5.PyMcaGui.physics.xrf import McaAdvancedFit
from subprocess import Popen
import os, platform
from Map2H5.FastFit import FastFit
import threading
from functools import partial
from Map2H5 import ElevatorPlayer
AUDIOSUPPORT = ElevatorPlayer.AUDIOSUPPORT
ElevatorPlayer = ElevatorPlayer.ElevatorPlayer
#from Map2H5.ElevatorPlayer import ElevatorPlayer
import tifffile as tf
from Map2H5.DynamicReader import DynamicReader

INSTALLDIR = os.path.dirname(os.path.dirname(__file__))

def SaveTiff(arrayin, tiffout):
    tf.imwrite(tiffout, arrayin.astype(uint16))

class Shifter(threading.Thread):
    def __init__(self, threadID, master):
        super().__init__()
        self.master = master
    
    def run(self):
        if self.master.shift_value != 0:
            self.master.data.data = self.master.shift_data(self.master.data.data, n = self.master.shift_value)
            self.master.data.shift_value += self.master.shift_value 
            self.master.shift_value = 0

            self.master.unpad_filter = (self.master.data.data.sum(2).sum(0) != 0)
            
            self.master.unpad()



class RGBFrame(customtkinter.CTkFrame):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
       
        self.out = None
        self.shape = None
        self.grid_columnconfigure((0,1,2,3), weight = 1)
        
        self.keys = list(self.master.master.labels.keys() )
        self.label = customtkinter.CTkLabel(master = self, text = "RGB")
        self.label.grid(row = 0, column = 0, padx = 3, pady = 3, sticky = "nswe")
        self.channels = ["red","green", "blue"]
        for i,ch in enumerate(self.channels):
            setattr(self, ch, customtkinter.CTkOptionMenu(master = self,
                                                          values = [ch.capitalize()] + self.keys,
                                                          command = partial(self.set_channel, channel = i)))
            getattr(self, ch).grid(row = 0, column = i+1, padx = 3, pady = 3)
            getattr(self, ch).set(ch.capitalize())

    def set_channel(self, choice, channel):
        if choice in self.keys:
            self.out[:,:,channel] = self.master.master.norm(self.master.master.labels[choice]).astype(uint8)
        else:
            self.out[:,:,channel] = zeros(self.shape, dtype = uint8)
        self.update_image()

    def update_image(self):
        self.master.master.imarray = self.out.copy()
        self.master.master.shift_callback(self.master.master.shift_value, update = False)
        self.master.master.canvas_frame = Zoom_Advanced(master = self.master.master)
        self.master.master.canvas_frame.grid(row = 1, column = 0, columnspan = 3, sticky = "nswe")
        

class EMaps(customtkinter.CTkFrame):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.grid_columnconfigure((0,1), weight = 1)

        self.combobox = customtkinter.CTkOptionMenu(master = self,
                                                    values = list(self.master.labels.keys()),
                                                    command = self.showEmap)
        self.combobox.set('data')
        self.combobox.grid(row = 0, column = 0, padx = 5, pady = 3)
        self.data_sliders = SlidersFrame(master = self,
                                         Min = 0,
                                         Max = 1,
                                         vmax_callback = self.update_data_vmax,
                                         vmin_callback = self.update_data_vmin)
        self.data_sliders.grid(row = 1, column = 0, padx = 5, pady = 3)

        self.rgbframe = RGBFrame(master = self)
        self.rgbframe.grid(row = 0, column = 1, padx = 3, pady = 3, sticky = "we")
        
        self.vmax = 255.
        self.vmin = 0.
    
    def update_data_vmax(self, value = None):
        if not value: value = self.data_sliders.slider_vmax.get()
        self.vmax = value * 255
        if hasattr(self.master, "canvas_frame"):
            self.master.canvas_frame.set_imarray(self.master.norm(self.master.MaxMinNorm(self.master.imarray.astype(uint16),vmin = self.vmin, vmax = self.vmax)).astype(uint8))

    def update_data_vmin(self, value = None):
        if not value: value = self.data_sliders.slider_vmin.get()
        self.vmin = value * 255
        if hasattr(self.master, "canvas_frame"):
            self.master.canvas_frame.set_imarray(self.master.norm(self.master.MaxMinNorm(self.master.imarray.astype(uint16), vmin  = self.vmin, vmax = self.vmax)).astype(uint8))
        
    def showEmap(self, choice):
        self.master.imarray = self.master.norm(self.master.labels[choice]).astype(uint8)
        self.master.shift_callback(self.master.shift_value, update = False)
        self.master.canvas_frame = Zoom_Advanced(master = self.master)
        self.master.canvas_frame.grid(row = 1, column = 0, columnspan = 3, sticky = "nswe")
        

class SlidersFrame(customtkinter.CTkFrame):
    def __init__(self, *args, Min, Max, vmax_callback, vmin_callback, **kwargs):
        super().__init__(*args, **kwargs)
        self.minvalue = Min
        self.maxvalue = Max
        self.vmin = self.minvalue
        self.vmax = self.maxvalue

        self.vmax_callback = vmax_callback
        self.vmin_callback = vmin_callback
        
        self.slider_vmax = customtkinter.CTkSlider(master = self, from_ = self.minvalue, to = self.maxvalue, command = lambda value: self.vmax_callback(value)) 
        self.slider_vmax.grid(row = 0, column = 0)
        self.slider_vmax.set(1.0)
        
        self.slider_vmin = customtkinter.CTkSlider(master = self, from_ = self.minvalue, to = self.maxvalue, command = lambda value: self.vmin_callback(value))
        self.slider_vmin.grid(row = 1, column = 0)
        self.slider_vmin.set(0.)

class ExistsDialog(customtkinter.CTkToplevel):
    def __init__(self, *args, fname = None,  **kwargs):
        super().__init__(*args, **kwargs)

        self.fname = fname
        self.newfname = None
        self.grid_columnconfigure(0, weight = 1)

        self.label = customtkinter.CTkLabel(master = self, text = f"{fname}\nalready exists")
        self.label.grid(row = 0, column = 0, padx = 3, pady = 10, sticky = "nswe")

        self.btnframe = customtkinter.CTkFrame(master = self)
        self.btnframe.grid(row = 1, column = 0, padx = 3, pady = 10, sticky = "nswe")
        self.btnframe.grid_columnconfigure((0,1,2), weight = 1)

        self.overwrite_btn = customtkinter.CTkButton(master = self.btnframe, text = "overwrite", command = self.overwrite_callback)
        self.overwrite_btn.grid(row = 0, column = 0, padx = 3, pady = 3)

        self.change_btn = customtkinter.CTkButton(master=self.btnframe, text = "change", command = self.change_callback)
        self.change_btn.grid(row = 0, column = 1, padx = 3, pady = 3)

        self.abort_btn = customtkinter.CTkButton(master = self.btnframe, text = "abort", command = lambda: self.destroy())
        self.abort_btn.grid(row =0 , column = 2, padx = 3, pady = 3)

    def overwrite_callback(self):
        os.remove(self.fname)
        pathname, extension = os.path.splitext(self.fname)
        self.newfname = os.path.basename(pathname)
        self.destroy()

    def change_callback(self):
        newfname = customtkinter.filedialog.asksaveasfilename(title = "New Root filename",
                                                          initialdir = os.path.dirname(self.fname),
                                                          filetypes = [("HDF5", "*.h5"),("all", "*")])
        if newfname:
            if os.path.exists(newfname): os.remove(newfname)
            pathname, extension = os.path.splitext(newfname)
            self.newfname = os.path.basename(pathname)

        self.destroy()

    def get(self):
        return self.newfname

class SaveOptions(customtkinter.CTkToplevel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.geometry("300x200")
        self.title("Save Options")
        self.label = customtkinter.CTkLabel(master = self, text = "Select save options")
        self.label.grid(row = 0, column = 0, sticky = "we")

        self.combobox = customtkinter.CTkOptionMenu(master = self,
                                                    values = ['Data (H5)', 'E-maps (Tiff)','Together (H5)'],
                                                    command = self.save_options)
        self.combobox.set('Data')
        self.combobox.grid(row = 1, column = 0)

        self.grid_columnconfigure(0, weight = 1)

    def save_options(self, choice):
        if hasattr(self.master, "data"):
            shifter = Shifter(0, self.master)
            shifter.start()
            path = customtkinter.filedialog.asksaveasfilename(title = "File or Directory name", initialdir = self.master.filedialog_path)
            if not path:
                self.destroy()
                return
            path, extension = os.path.splitext(path)
            if self.master.elevator: self.master.player = ElevatorPlayer(0, "player0", os.path.join(INSTALLDIR,'share/Map2H5','elevator-music.wav')) 
            message = MessageFrame(text = f"Saving {choice}...", elevator = self.master.elevator)
            message.update()
            message.focus()
            message.play(lambda: self.master.player.start())
            shifter.join()
            if choice == "Data (H5)":
                if hasattr(self.master.data, "calibration"):
                    del self.master.data.calibration
                self.master.data.save_h5(path+'.h5')
                print("Done!")
            
            elif hasattr(self.master, 'parameters'):
                keys = list(self.master.labels.keys())
                _ = keys.pop(keys.index("data"))
                
                if choice == "E-maps (Tiff)":
                    os.makedirs(path, exist_ok = True)
                    print(f"Saving in {path}...")
                    for k in keys:
                        fname = os.path.join(path, f"{k}.tiff")
                        SaveTiff(self.master.labels[k], fname)
                    os.remove(self.master.fit_output)
                    print("Done!")

                elif choice == "Together (H5)":
                    if hasattr(self.master.data, "calibration"):
                        del self.master.data.calibration
                    self.master.data.metadata['labels'] = keys
                    self.master.data.labels = zeros((self.master.data.shape[0], self.master.data.shape[1],len(keys)))
                    for i, k in enumerate(keys):
                        self.master.data.labels[:,:,i] = self.master.labels[k]
                    self.master.data.save_h5(path+'.h5')
                    print("Done!")
            
            message.stop(lambda: self.master.player.stop()) 
            message.destroy()

        self.destroy()


class FitOptions(customtkinter.CTkToplevel):
    def __init__(self, *args, sumspectrum_path = None, **kwargs):
        super().__init__(*args, **kwargs)

        self.sumspectrum_path = sumspectrum_path
        self.geometry("300x200")
        self.title("Fit Options")
        self.label = customtkinter.CTkLabel(master = self, text = "Select fit options")
        self.label.grid(row = 0, column = 0, padx = 10, pady = 10, sticky = "nswe")

        self.combobox = customtkinter.CTkOptionMenu(master = self,
                                                    values = ['configure', 'fast-fit'],
                                                    command = self.fit_options)
        self.combobox.set('configure')
        self.combobox.grid(row = 1, column = 0, padx = 10, pady = 10)
        
        self.grid_columnconfigure(0, weight = 1)
    
    def PyMcaAdvFit(self):
        if platform.system().startswith('Linux'):
            bindir = "bin" 
        elif platform.system().startswith('Windows'):
            bindir = "Scripts"
        if self.sumspectrum_path:
            command = ['python', os.path.join(INSTALLDIR, bindir,'PyMcaAdvFit'), f'{self.sumspectrum_path}']
            p = Popen(command)
            p.wait()

    def fit_options(self, choice):
        if choice == "configure" and hasattr(self.master, "data"):
            self.PyMcaAdvFit()
        elif choice == "fast-fit":
            print(self.master.data.shape)
            shifter = Shifter(0, self.master)
            shifter.start()
            cfg = customtkinter.filedialog.askopenfilename(title = "Open config file",
                                                           initialdir = self.master.filedialog_path,
                                                           filetypes = [("CFG", "*.cfg"), ("ALL", "*")])
            outputdir = os.getcwd() if cfg else None
            self.ffit = FastFit(cfgfile = cfg, outputdir = outputdir)
            if hasattr(self.ffit, "filename") and os.path.exists(self.ffit.filename):
                dialog = ExistsDialog(fname = self.ffit.filename)
                dialog.update()
                dialog.focus()
                self.wait_window(dialog)
                newfname = dialog.get()
                if newfname:
                    self.ffit.outputRoot = newfname
                else:
                    self.ffit.outputdir = None
                dialog.destroy()
            
            if self.ffit.outputdir:
                print("Fitting data...")
                print("outputdir", outputdir)
                if self.master.elevator: self.master.player = ElevatorPlayer(0, "player0", os.path.join(INSTALLDIR,'share/Map2H5','elevator-music.wav')) 
                message = MessageFrame(text = "Fitting...", elevator = self.master.elevator)
                message.update()
                message.focus()
                message.play(lambda: self.master.player.start())
                shifter.join()
                self.ffit.data = self.master.data.data
                self.ffit.fit()
                message.stop(lambda: self.master.player.stop())
                message.destroy()
        
        self.destroy()
    
    def get_parameters(self):
        if hasattr(self, "ffit"):
            par = self.ffit.get_calibration_pars()
            if par:
                return par 

    def get_labels(self):
        if hasattr(self, "ffit"):
            labels = self.ffit.get_labels()
            if labels:
                return labels

class MessageFrame(customtkinter.CTkToplevel):
    def __init__(self, *args, text, elevator = False, **kwargs):
        super().__init__(*args, **kwargs)
        
        self.geometry("200x100")
        self.title("")
        self.elevator = elevator
        self.grid_rowconfigure(0, weight = 1)
        self.grid_columnconfigure(0, weight = 1)
        
        self.label = customtkinter.CTkLabel(self, text = text)
        self.label.grid(row = 0, column = 0, padx = 5, pady = 5, sticky = "nswe")

        self.label.grid(row = 0, column =0, sticky = "nsew")

        
    def play(self, callback = None):
        if self.elevator:
            callback()


    def stop(self, callback = None):
        if self.elevator:
            callback()


class IntSpinbox(customtkinter.CTkFrame):
    def __init__(self, *args,
                 width: int = 100,
                 height: int = 32,
                 step_size: int = 1,
                 command = None,
                 **kwargs):
        super().__init__(*args, width=width, height=height, **kwargs)

        self.step_size = step_size
        self.command = command

        self.configure(fg_color=("gray78", "gray28"))  # set frame color

        self.grid_columnconfigure((0, 2), weight=0)  # buttons don't expand
        self.grid_columnconfigure(1, weight=1)  # entry expands

        self.subtract_button = customtkinter.CTkButton(self, text="-", width=height-6, height=height-6,
                                                       command=self.subtract_button_callback)
        self.subtract_button.grid(row=0, column=0, padx=(3, 0), pady=3)

        self.entry = customtkinter.CTkEntry(self, width=width-(2*height), height=height-6, border_width=0)
        self.entry.grid(row=0, column=1, columnspan=1, padx=3, pady=3, sticky="ew")

        self.add_button = customtkinter.CTkButton(self, text="+", width=height-6, height=height-6,
                                                  command=self.add_button_callback)
        self.add_button.grid(row=0, column=2, padx=(0, 3), pady=3)

        self.set_default()

    def set_default(self):        # default value
        self.entry.delete(0, "end")
        self.entry.insert(0, "0")
        self.shift = 0

    def add_button_callback(self):
        try:
            value = int(self.entry.get()) + self.step_size
            self.entry.delete(0, "end")
            self.entry.insert(0, value)
        except ValueError:
            return
        if self.command is not None:
            self.command(1)

    def subtract_button_callback(self):
        try:
            value = int(self.entry.get()) - self.step_size
            self.entry.delete(0, "end")
            self.entry.insert(0, value)
        except ValueError:
            return
        if self.command is not None:
            self.command(-1)

    def get(self) -> int:
        try:
            return int(self.entry.get())
        except ValueError:
            return None

    def set(self, value: int):
        self.entry.delete(0, "end")
        self.entry.insert(0, str(int(value)))

class AutoScrollbar(customtkinter.CTkScrollbar):
    ''' A scrollbar that hides itself if it's not needed.
        Works only if you use the grid geometry manager '''
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
    def set(self, lo, hi):
        if float(lo) <= 0.0 and float(hi) >= 1.0:
            self.grid_remove()
        else:
            self.grid()
            customtkinter.CTkScrollbar.set(self, lo, hi)

    def pack(self, **kw):
        raise tk.TclError('Cannot use pack with this widget')

    def place(self, **kw):
        raise tk.TclError('Cannot use place with this widget')

class Zoom_Advanced(customtkinter.CTkFrame):
    ''' Advanced zoom of the image '''
    def __init__(self, *args, **kwargs):
        ''' Initialize the main Frame '''
        super().__init__(*args, **kwargs)
        #self.master.title('Zoom with mouse wheel')
        # Vertical and horizontal scrollbars for canvas
        vbar = AutoScrollbar(master = self, orientation='vertical')
        hbar = AutoScrollbar(master = self, orientation='horizontal')
        vbar.grid(row=0, column=1, sticky='ns')
        hbar.grid(row=1, column=0, sticky='we')
        # Create canvas and put image on it
        self.canvas = tk.Canvas(self, highlightthickness=0,
                                xscrollcommand=hbar.set, yscrollcommand=vbar.set, bg = "black")
        self.canvas.grid(row=0, column=0, sticky='nswe')
        self.canvas.update()  # wait till canvas is created
        vbar.configure(command=self.scroll_y)  # bind scrollbars to the canvas
        hbar.configure(command=self.scroll_x)
        # Make the canvas expandable
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)
        # Bind events to the Canvas
        self.canvas.bind('<Configure>', self.show_image)  # canvas is resized
        self.canvas.bind('<ButtonPress-1>', self.move_from)
        self.canvas.bind('<B1-Motion>',     self.move_to)
        self.canvas.bind('<MouseWheel>', self.wheel)  # with Windows and MacOS, but not Linux
        self.canvas.bind('<Button-5>',   self.wheel)  # only with Linux, wheel scroll down
        self.canvas.bind('<Button-4>',   self.wheel)  # only with Linux, wheel scroll up
        self.imarr = self.master.imarray  # open image
        self.image = Image.fromarray(self.imarr)
        self.width, self.height = self.image.size
        self.imscale = 1.0  # scale for the canvaas image
        self.delta = 1.1  # zoom magnitude
        # Put image into container rectangle and use it to set proper coordinates to the image
        self.container = self.canvas.create_rectangle(0, 0, self.width, self.height, width=0)
        self.show_image()

    def scroll_y(self, *args, **kwargs):
        ''' Scroll canvas vertically and redraw the image '''
        self.canvas.yview(*args, **kwargs)  # scroll vertically
        self.show_image()  # redraw the image

    def scroll_x(self, *args, **kwargs):
        ''' Scroll canvas horizontally and redraw the image '''
        self.canvas.xview(*args, **kwargs)  # scroll horizontally
        self.show_image()  # redraw the image

    def move_from(self, event):
        ''' Remember previous coordinates for scrolling with the mouse '''
        self.canvas.scan_mark(event.x, event.y)

    def move_to(self, event):
        ''' Drag (move) canvas to the new position '''
        self.canvas.scan_dragto(event.x, event.y, gain=1)
        self.show_image()  # redraw the image

    def wheel(self, event):
        ''' Zoom with mouse wheel '''
        x = self.canvas.canvasx(event.x)
        y = self.canvas.canvasy(event.y)
        bbox = self.canvas.bbox(self.container)  # get image area
        if bbox[0] < x < bbox[2] and bbox[1] < y < bbox[3]: pass  # Ok! Inside the image
        else: return  # zoom only inside image area
        scale = 1.0
        # Respond to Linux (event.num) or Windows (event.delta) wheel event
        if event.num == 5 or event.delta == -120:  # scroll down
            i = min(self.width, self.height)
            if int(i * self.imscale) < 30: return  # image is less than 30 pixels
            self.imscale /= self.delta
            scale        /= self.delta
        if event.num == 4 or event.delta == 120:  # scroll up
            i = min(self.canvas.winfo_width(), self.canvas.winfo_height())
            if i < self.imscale: return  # 1 pixel is bigger than the visible area
            self.imscale *= self.delta
            scale        *= self.delta
        self.canvas.scale('all', x, y, scale, scale)  # rescale all canvas objects
        self.show_image()

    def show_image(self, event=None):
        ''' Show image on the Canvas '''
        self.image = Image.fromarray(self.imarr)
        self.width, self.height = self.image.size
        bbox1 = self.canvas.bbox(self.container)  # get image area
        # Remove 1 pixel shift at the sides of the bbox1
        bbox1 = (bbox1[0] + 1, bbox1[1] + 1, bbox1[2] - 1, bbox1[3] - 1)
        bbox2 = (self.canvas.canvasx(0),  # get visible area of the canvas
                 self.canvas.canvasy(0),
                 self.canvas.canvasx(self.canvas.winfo_width()),
                 self.canvas.canvasy(self.canvas.winfo_height()))
        bbox = [min(bbox1[0], bbox2[0]), min(bbox1[1], bbox2[1]),  # get scroll region box
                max(bbox1[2], bbox2[2]), max(bbox1[3], bbox2[3])]
        if bbox[0] == bbox2[0] and bbox[2] == bbox2[2]:  # whole image in the visible area
            bbox[0] = bbox1[0]
            bbox[2] = bbox1[2]
        if bbox[1] == bbox2[1] and bbox[3] == bbox2[3]:  # whole image in the visible area
            bbox[1] = bbox1[1]
            bbox[3] = bbox1[3]
        self.canvas.configure(scrollregion=bbox)  # set scroll region
        x1 = max(bbox2[0] - bbox1[0], 0)  # get coordinates (x1,y1,x2,y2) of the image tile
        y1 = max(bbox2[1] - bbox1[1], 0)
        x2 = min(bbox2[2], bbox1[2]) - bbox1[0]
        y2 = min(bbox2[3], bbox1[3]) - bbox1[1]
        if int(x2 - x1) > 0 and int(y2 - y1) > 0:  # show image if it in the visible area
            x = min(int(x2 / self.imscale), self.width)   # sometimes it is larger on 1 pixel...
            y = min(int(y2 / self.imscale), self.height)  # ...and sometimes not
            image = self.image.crop((int(x1 / self.imscale), int(y1 / self.imscale), x, y))
            imagetk = ImageTk.PhotoImage(image.resize((int(x2 - x1), int(y2 - y1)), Image.Resampling.NEAREST))
            imageid = self.canvas.create_image(max(bbox2[0], bbox1[0]), max(bbox2[1], bbox1[1]),
                                               anchor='nw', image=imagetk)
            self.canvas.lower(imageid)  # set image into background
            self.canvas.imagetk = imagetk  # keep an extra reference to prevent garbage-collection

    def set_imarray(self, _array):
        self.imarr = _array
        self.show_image()

class App(customtkinter.CTk):
    def __init__(self, *args, path = None, **kwargs):
        super().__init__(*args, **kwargs)
        
        self.name = "map2h5"
        self.dynamic = False
        self.reading = False
        customtkinter.set_appearance_mode('dark')       
        customtkinter.set_default_color_theme('dark-blue')
        
        self.geometry('800x500')
        self.title("Map2H5")
        self.shift_value = 0
        self.filedialog_path = os.path.expanduser("~")

        self.elevator = False
        self.labels = {}
        
        self.grid_rowconfigure(1, weight = 1)
        self.grid_columnconfigure(0, weight = 1)
        
        self.menubar = customtkinter.CTkFrame(master = self)
        self.menubar.grid_columnconfigure((0,1,2,3,4,5), weight = 1)
        self.menubar.grid(row = 0, column = 0, padx = 3, pady = 3, sticky = "we")
        
        self.switch_var = customtkinter.StringVar(value = "off")
        self.switch_dynamic = customtkinter.CTkSwitch(master = self.menubar, text = "Dynamic", command = self.on_switch, variable = self.switch_var, onvalue = "on", offvalue = "off")
        self.switch_dynamic.grid(row = 0, column = 0, padx = 3, pady = 3)

        self.read_button = customtkinter.CTkButton(master = self.menubar, text = "Read", command = self.read_callback)
        self.read_button.grid(row = 0, column = 1, padx = 3, pady = 3)
        self.read_button_fgcolor = self.read_button.cget("fg_color")
        self.read_button_hcolor = self.read_button.cget("hover_color")

        self.add_button = customtkinter.CTkButton(master = self.menubar, text = "Add", command = self.add_callback)
        self.add_button.grid(row = 0, column = 2, padx = 3, pady = 3)
        
        self.shift_sbox = IntSpinbox(master = self.menubar, command=self.shift_callback)
        self.shift_sbox.grid(row = 0, column = 3, padx = 3, pady = 3)
        
        self.fit_button = customtkinter.CTkButton(master = self.menubar, text = "PyMcaFit", command = self.fit_callback)
        self.fit_button.grid(row = 0, column  = 4, padx = 3, pady = 3)
        
        self.save_button = customtkinter.CTkButton(master = self.menubar, text = "Save", command = self.save_callback)
        self.save_button.grid(row = 0, column = 5, padx = 3, pady = 3)

        if not hasattr(self, "canvas_frame"):
            self.canvas_frame = None

        #self.norm = lambda x: (x-x.min())/(x.max()-x.min())*255
        self.bind("<Destroy>", self.on_destroy)
        self.bind("<Control-Key-m>", self.on_ctrlM)

        self.emapsmenu = EMaps(master = self)

    def norm(self,x):
        _max = x.max()
        _min = x.min()
        if _max > _min:
            return (x-_min)/(_max-_min)*255

    def MaxMinNorm(self, x, vmin = None, vmax = None):
        x = x.copy()
        _min = x.min()
        _max = x.max()
        if vmin == None: vmin = _min
        if vmax == None: vmax = _max
        cndmin = x < max(vmin, _min)
        cndmax = x > min(vmax, _max)
        x[cndmin] = vmin
        x[cndmax] = vmax 
        return x

    def update_imarray(self):
        print("image updated")
        self.imarray = self.data.data.sum(2)
        self.emapsmenu.update_data_vmax()
        self.emapsmenu.update_data_vmin()

    def shift_data(self,data,n):
    
        def pad(x,n):
            padding = zeros((x.shape[0],abs(n),x.shape[2]))
            if n > 0:
                x = hstack((x,padding))
            elif n < 0:
                x = hstack((padding, x))
            return x

        x = pad(data,n)
        x[::2] = roll(x[::2], n, axis = 1)

        return x
    
    def unpad(self):
        if (~self.unpad_filter).any():
            self.data.data = self.data.data[:,self.unpad_filter]

    def on_switch(self):
        if self.switch_var.get() == "on":
            self.dynamic = True
        else:
            self.dynamic = False

    def _get_labels_list(self):
        self.labels_list = []
        if self.cfgfile:
            with open(self.cfgfile) as f:
                line = f.readline()
                while not line.startswith('[peaks]'):
                    line = f.readline()
                while True:
                    line = f.readline()
                    if line.startswith("\n") : break
                    lline = line.split('=')
                    l = re.findall(r'[A-Z]+[0-3]|[A-Z]+[a-b]|[A-Z]', lline[1])
                    for item in l:
                        self.labels_list += [f'{lline[0][:-1]}-{item}']

    def read_callback(self):
        if self.dynamic:
            self.reading = not self.reading
            if self.reading:
                self.read_button.configure(fg_color = "#fc0341")
                self.read_button.configure(hover_color = "#850122") 
            else:
                self.read_button.configure(fg_color = tuple(self.read_button_fgcolor))
                self.read_button.configure(hover_color = tuple(self.read_button_hcolor))
                if hasattr(self, "reader"): self.reader.stop_reading()
            self.path = customtkinter.filedialog.askdirectory(initialdir = self.filedialog_path)
            self.cfgfile = customtkinter.filedialog.askopenfilename(title = "Open PyMca config file", initialdir = self.filedialog_path)
            if not self.path and not self.cfgfile: return
            self.filedialog_path = self.path
            self.outputdir = self.path
            self.ndetector = 0
            head, tail = os.path.split(self.path)
            for item in os.listdir(self.path):
                if item.startswith(tail) and os.path.isdir(os.path.join(self.path,item)):
                    self.ndetector += 1
            print("ndetector:", self.ndetector)
            self.reader = DynamicReader(root = self, path = self.path, ndetector = self.ndetector)
            self.data = DataXRF()
            self.data.shift_value = 0
            self.data.data = zeros((self.reader.nrow, self.reader.rowlen, 2048))
            print(self.data.data.shape)
            self._get_labels_list()
            self.imarray = (self.data.data.sum(2)).astype(uint8)
            self.labels = {"data" : self.imarray}
            for k in self.labels_list:
                self.labels[k] = zeros((self.reader.nrow, self.reader.rowlen))
            self.reader.start_reading()
            self.emapsmenu.combobox.configure(values = list(self.labels.keys()))
            if platform.system().startswith('Linux'):
                self.sumspectrum_path = f"/tmp/{os.path.basename(self.path)}_{self.name}_sumspectrum.tmp"
            elif platform.system().startswith('Windows'):
                self.sumspectrum_path = f"C:/Users/{os.getlogin()}/AppData/Local/Temp/{os.path.basename(self.path)}_{self.name}_sumspectrum.tmp"
            self.emapsmenu.rgbframe.out = zeros((self.data.shape[0], self.data.shape[1], 3)).astype(uint8)
            self.emapsmenu.rgbframe.shape = self.data.shape[:2]
            self.emapsmenu.rgbframe.keys = list(self.labels.keys())
            for attr in ['red', 'green', 'blue']:
                getattr(self.emapsmenu.rgbframe, attr).configure(values = [attr.capitalize()] + list(self.labels.keys()))
            self.emapsmenu.grid(row = 2, column = 0, padx = 3, pady = 3, sticky = "we")
            #self.emapsmenu.showEmap("data")
            self.canvas_frame = Zoom_Advanced(master = self)
            self.canvas_frame.grid(row = 1, column = 0, columnspan = 3, sticky = "nswe")

        else:
            self.path = customtkinter.filedialog.askdirectory(initialdir = self.filedialog_path)
            if self.path:
                self.filedialog_path = self.path
                cwd = ''
                while cwd == '':
                    self.filedialog_path, cwd = os.path.split(self.filedialog_path)
                if self.elevator: self.player = ElevatorPlayer(0, "player0", os.path.join(INSTALLDIR, 'share/Map2H5','elevator-music.wav'))
                self.message = MessageFrame(text = "Reading...", elevator = self.elevator)
                self.message.play(lambda: self.player.start())
                self.message.update()
                self.message.focus()
                self.data = DataXRF().read_from_map(self.path)
                self.data.shift_value = 0
                self.message.stop(lambda: self.player.stop())
                self.message.destroy()
                self.imarray = self.norm(self.data.data.sum(2)).astype(uint8)
                self.labels = {"data" : self.imarray}
                self.emapsmenu.combobox.configure(values = list(self.labels.keys()))
                self.emapsmenu.grid_remove()
                if platform.system().startswith('Linux'):
                    self.sumspectrum_path = f"/tmp/{os.path.basename(self.path)}_{self.name}_sumspectrum.tmp"
                elif platform.system().startswith('Windows'):
                    self.sumspectrum_path = f"C:/Users/{os.getlogin()}/AppData/Local/Temp/{os.path.basename(self.path)}_{self.name}_sumspectrum.tmp"
                data = self.data.data.sum(0).sum(0)
                npixel = self.data.shape[0]*self.data.shape[1]
                savetxt(self.sumspectrum_path, transpose([arange(self.data.shape[2]),data/npixel]))
                self.canvas_frame = Zoom_Advanced(master = self)
                self.canvas_frame.grid(row = 1, column = 0, columnspan = 3, sticky = "nswe")
                self.shift_sbox.set_default()
                self.shift_value = 0
        
    def add_callback(self):
        if self.dynamic: return
        if not hasattr(self,"data"):
            return
        path = customtkinter.filedialog.askdirectory(initialdir = self.filedialog_path)
        if path:
            if self.elevator: self.player = ElevatorPlayer(0, "player0", os.path.join(INSTALLDIR, 'share/Map2H5','elevator-music.wav'))
            self.message = MessageFrame(text = "Reading...", elevator = self.elevator)
            self.message.play(lambda: self.player.start())
            self.message.update()
            self.message.focus()
            data = DataXRF().read_from_map(path)
            self.message.stop(lambda: self.player.stop())
            self.message.destroy()
            if self.data.shift_value != 0: data.data = self.shift_data(data.data, self.data.shift_value)
            self.data.data = self.data.data.copy() + data.data
            self.imarray = self.norm(self.data.data.sum(2)).astype(uint8)
            if os.name == "posix":
                self.sumspectrum_path = f"/tmp/{os.path.basename(self.path)}_my_app.tmp"
            else:
                self.sumspectrum_path = f"C:/Users/AppData/Local/Temp/{os.path.basename(self.path)}_my_app.tmp"
            del(data)
            data = self.data.data.sum(0).sum(0)
            npixel = self.data.shape[0]*self.data.shape[1]
            savetxt(self.sumspectrum_path, transpose([arange(self.data.shape[2]),data/npixel]))
            self.labels = {"data" : self.imarray}
            self.emapsmenu.combobox.configure(values = list(self.labels.keys()))
            self.emapsmenu.grid_remove()
            self.canvas_frame = Zoom_Advanced(master = self)
            self.canvas_frame.grid(row = 1, column = 0, columnspan = 3, sticky = "nswe")
            self.shift_sbox.set_default()
            self.shift_value = 0
            
    
    def save_callback(self):
        selection = SaveOptions()
        selection.focus()

    def fit_callback(self):
        if hasattr(self, "sumspectrum_path"):
            fitopt = FitOptions(sumspectrum_path = self.sumspectrum_path)
            fitopt.focus()
            self.wait_window(fitopt)
            self.parameters = fitopt.get_parameters()
            self.labels = fitopt.get_labels()
            if self.labels:
                print("after fit:", self.labels[list(self.labels.keys())[0]].shape)
                self.shift_sbox.set_default()
                print("parameters", self.parameters)
                self.emapsmenu.combobox.configure(values = ["data"]+list(self.labels.keys()))
                self.emapsmenu.rgbframe.out = zeros((self.data.shape[0], self.data.shape[1], 3)).astype(uint8)
                self.emapsmenu.rgbframe.shape = self.data.shape[:2]
                self.emapsmenu.rgbframe.keys = list(self.labels.keys())
                for attr in ['red', 'green', 'blue']:
                    getattr(self.emapsmenu.rgbframe, attr).configure(values = [attr.capitalize()] + list(self.labels.keys()))
                self.labels['data'] = self.data.data.sum(2)
                self.imarray = self.norm(self.labels['data']).astype(uint8)
                self.emapsmenu.grid(row = 2, column = 0, padx = 3, pady = 3, sticky = "we")
                self.emapsmenu.showEmap("data")
                self.data.calibrate_from_parameters(self.parameters)
                self.data._x  = self.data.x
                self.fit_output = fitopt.ffit.filename

    def shift_callback(self, value, update = True):
        if hasattr(self, "imarray") and type(self.imarray) != type(None):
            self.imarray[::2] = roll(self.imarray.copy()[::2], value, axis=1)
            if update: self.shift_value += value
            self.canvas_frame.show_image()

    def on_destroy(self, event):
        if event.widget == self:
            if hasattr(self, "sumspectrum_path"):
                os.remove(self.sumspectrum_path)

    def on_ctrlM(self, event):
        self.elevator = AUDIOSUPPORT and (not self.elevator)
        if not self.elevator:
            if hasattr(self, "player") and self.player.is_playing():
                self.player.stop()

if __name__ == "__main__":
    root = App()
    if platform.system().startswith('Linux'):
        root.option_add('*TkChooseDir*foreground', 'gray10')
        root.option_add('*TkFDialog*foreground', 'gray10')
    root.mainloop()
